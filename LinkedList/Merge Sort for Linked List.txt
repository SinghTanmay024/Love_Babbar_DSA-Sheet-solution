class Solution
{
    //Function to sort the given linked list using Merge Sort.
    static Node mergeSort(Node head)
    {
        if(head == null || head.next == null){
            return head;
        }
        Node mid = getMiddle(head);
        Node nex = mid.next;
        
        mid.next = null;
        
        Node left = mergeSort(head);
        Node right = mergeSort(nex);
        
        Node sorted = sortedMerge(left,right);
        return sorted;
    }
    static Node getMiddle(Node head){
        if(head == null){
            return head;
        }
        Node slow = head;
        Node fast = head;
        while(fast.next != null && fast.next.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    static Node sortedMerge(Node a,Node b){
        Node res = null;
        
        if(a == null)return b;
        if(b == null)return a;
        
        if(a.data <= b.data){
            res = a;
            res.next = sortedMerge(a.next,b);
        }else{
            res = b;
            res.next = sortedMerge(a,b.next);
        }
        return res;
    }
}